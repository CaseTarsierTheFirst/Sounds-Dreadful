// snr_calc.sv
// Estimate SNR in dB from mic_load samples

module snr_calc #(
  parameter int N = 16,
  parameter int EMA_SHIFT = 10   // averaging constant (2^10 ~ 1024 samples)
)(
  input  logic                clk,
  input  logic                valid,
  input  logic signed [N-1:0] sample_data,
  input  logic                KEY0,      // active-low: capture noise
  output logic [7:0]          snr_db     // 0–99 dB
);

  // --- 1) Power estimation (EMA of x^2) ---
  logic [31:0] x2;
  always_ff @(posedge clk) if (valid)
    x2 <= $signed(sample_data) * $signed(sample_data);

  logic [47:0] pwr;
  always_ff @(posedge clk) if (valid)
    pwr <= pwr - (pwr >> EMA_SHIFT) + {16'd0, x2};

  // --- 2) Noise floor capture ---
  logic btn0, btn1, btn_q;
  always_ff @(posedge clk) begin
    btn0 <= ~KEY0; btn1 <= btn0; btn_q <= btn1;
  end
  wire capture = btn1 & ~btn_q;

  logic [47:0] noise_pwr;
  always_ff @(posedge clk) begin
    if (capture)
      noise_pwr <= (pwr == 0) ? 48'd1 : pwr;
    if (noise_pwr == 0)
      noise_pwr <= 48'd1;
  end

  // --- 3) log2 approximation function ---
  function automatic [15:0] log2_q8 (input [47:0] v);
    integer i; reg [5:0] msb; reg [47:0] norm; reg [7:0] frac;
    begin
      if (v == 0) begin
        log2_q8 = 16'd0;
      end else begin
        msb = 0;
        for (i=47; i>=0; i=i-1) if (v[i]) begin msb = i[5:0]; break; end
        norm = v << (47 - msb);
        frac = norm[46:39];
        log2_q8 = {msb[7:0], frac}; // Q8.8
      end
    end
  endfunction

  // --- 4) SNR in dB (≈ 3.01 * log2 ratio) ---
  logic [15:0] l2s, l2n, l2d, db_q8;
  logic [31:0] mult_tmp;
  always_ff @(posedge clk) begin
    l2s      <= log2_q8(pwr);
    l2n      <= log2_q8(noise_pwr);
    l2d      <= l2s - l2n;
    mult_tmp <= l2d * 32'd773;    // *3.019 ≈ 10*log10()
    db_q8    <= mult_tmp[23:8];   // >>8
  end

  always_comb begin
    if ($signed(db_q8[15:8]) < 0)       snr_db = 8'd0;
    else if (db_q8[15:8] > 8'd99)       snr_db = 8'd99;
    else                                snr_db = db_q8[15:8];
  end

endmodule
